
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://saxnxtumstrsqowuwwbt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNheG54dHVtc3Ryc3Fvd3V3d2J0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc5MDkxODgsImV4cCI6MjA1MzQ4NTE4OH0.ltOp920tiFP9EQab5lJG2_UVRYE0_JIOJ_GMtaGrLxc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Converts a potentially temporary workflow ID to a database-compatible UUID
 * @param workflowId The workflow ID to convert (can be with or without temp- prefix)
 * @returns UUID string that can be safely used in database operations
 */
export function convertToDbWorkflowId(workflowId: string): string {
  if (!workflowId) return workflowId;
  
  // If it's a temporary ID, extract the UUID part after 'temp-'
  if (workflowId.startsWith('temp-')) {
    return workflowId.substring(5); // Remove 'temp-' prefix
  }
  
  // Already a UUID or other format, return as-is
  return workflowId;
}

/**
 * Determines if a workflow ID is temporary based on its format
 * @param workflowId The workflow ID to check
 * @returns boolean indicating if the ID is temporary
 */
export function isTemporaryWorkflowId(workflowId: string): boolean {
  return workflowId ? workflowId.startsWith('temp-') : false;
}
